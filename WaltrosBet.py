
import telebot
import requests
import time
import threading
import random
from flask import Flask, request
from telebot.types import ReplyKeyboardMarkup

BOT_TOKEN = "8025355595:AAGK1QblfiZUCDOg5bDWeay9Pe-p-Q7_Kmw"
CRYPTO_TOKEN = "403892:AAM7xRf5QnFScaTX4v4Kn98z2gzCBWPNlWj"
CHANNEL_ID = -1001234567890
ADMIN_ID = 123456789

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)
balances = {}
referrals = {}
slots = ['üçí', 'üçã', 'üçä', 'üçâ', '‚≠ê', '7Ô∏è‚É£']

def menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", "üì§ –í—ã–≤–µ—Å—Ç–∏")
    kb.add("üé∞ –ò–≥—Ä–∞—Ç—å", "üí∞ –ë–∞–ª–∞–Ω—Å")
    kb.add("üë• –†–µ—Ñ–µ—Ä–∞–ª–∫–∞")
    return kb

@bot.message_handler(commands=['start'])
def start(message):
    uid = message.from_user.id
    balances.setdefault(uid, 0)
    if len(message.text.split()) > 1:
        ref = int(message.text.split()[1])
        if ref != uid and uid not in referrals:
            referrals[uid] = ref
            bot.send_message(ref, f"@{message.from_user.username} ‚Äî –≤–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª!")
    bot.send_message(uid, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WaltrosBet", reply_markup=menu())

@bot.message_handler(func=lambda m: True)
def handle(message):
    uid = message.from_user.id
    text = message.text.strip()
    if text == "üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å":
        create_invoice(uid)
    elif text == "üì§ –í—ã–≤–µ—Å—Ç–∏":
        bot.send_message(uid, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∞–¥—Ä–µ—Å:\n–ü—Ä–∏–º–µ—Ä:\n5.0 @username")
        bot.register_next_step_handler(message, withdraw)
    elif text == "üé∞ –ò–≥—Ä–∞—Ç—å":
        play(uid)
    elif text == "üí∞ –ë–∞–ª–∞–Ω—Å":
        bot.send_message(uid, f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balances.get(uid, 0):.2f} USDT")
    elif text == "üë• –†–µ—Ñ–µ—Ä–∞–ª–∫–∞":
        link = f"https://t.me/{bot.get_me().username}?start={uid}"
        bot.send_message(uid, f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
{link}")
    else:
        bot.send_message(uid, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.")

def create_invoice(uid):
    headers = {"Crypto-Pay-API-Token": CRYPTO_TOKEN}
    payload = {
        "asset": "USDT", "amount": 5,
        "description": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ WaltrosBet",
        "payload": str(uid),
        "paid_btn_url": f"https://t.me/{bot.get_me().username}",
        "paid_btn_name": "open_bot"
    }
    r = requests.post("https://pay.crypt.bot/createInvoice", headers=headers, json=payload).json()
    url = r["result"]["pay_url"]
    bot.send_message(uid, f"–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:
{url}")

def withdraw(message):
    try:
        uid = message.from_user.id
        amt, addr = message.text.split()
        amt = float(amt)
        if balances.get(uid, 0) < amt:
            return bot.send_message(uid, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
        balances[uid] -= amt
        bot.send_message(ADMIN_ID, f"–í—ã–≤–æ–¥ –æ—Ç @{message.from_user.username}: {amt} USDT ‚Üí {addr}")
        bot.send_message(uid, "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
    except:
        bot.send_message(uid, "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü—Ä–∏–º–µ—Ä:
5.0 @username")

def play(uid):
    if balances.get(uid, 0) < 5:
        return bot.send_message(uid, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
    balances[uid] -= 5
    r = [random.choice(slots) for _ in range(3)]
    text = f"{r[0]} | {r[1]} | {r[2]}
"
    if r[0] == r[1] == r[2]:
        win = 15
    elif r[0] == r[1] or r[1] == r[2]:
        win = 7
    else:
        win = 0
    if win:
        balances[uid] += win
        text += f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win} USDT!"
    else:
        text += "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ 5 USDT."
    bot.send_message(uid, text)

@app.route("/callback", methods=['POST'])
def callback():
    data = request.json
    if data.get("event") == "invoice_paid":
        uid = int(data["payload"])
        amt = float(data["amount"])
        balances[uid] = balances.get(uid, 0) + amt
        bot.send_message(uid, f"–ó–∞—á–∏—Å–ª–µ–Ω–æ {amt} USDT")
    return '', 200

def run_flask(): app.run(host="0.0.0.0", port=5000)
threading.Thread(target=run_flask).start()
bot.polling()
